<dependency>
			<groupId>org.tmatesoft.svnkit</groupId>
			<artifactId>svnkit</artifactId>
			<version>1.10.7</version>
		</dependency>
    
    
package com.example.demo;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.tmatesoft.svn.core.SVNDirEntry;
import org.tmatesoft.svn.core.SVNException;
import org.tmatesoft.svn.core.SVNNodeKind;
import org.tmatesoft.svn.core.SVNProperties;
import org.tmatesoft.svn.core.SVNURL;
import org.tmatesoft.svn.core.auth.ISVNAuthenticationManager;
import org.tmatesoft.svn.core.internal.io.dav.DAVRepositoryFactory;
import org.tmatesoft.svn.core.internal.io.fs.FSRepositoryFactory;
import org.tmatesoft.svn.core.internal.io.svn.SVNRepositoryFactoryImpl;
import org.tmatesoft.svn.core.internal.wc.DefaultSVNOptions;
import org.tmatesoft.svn.core.io.SVNRepository;
import org.tmatesoft.svn.core.io.SVNRepositoryFactory;
import org.tmatesoft.svn.core.wc.SVNClientManager;
import org.tmatesoft.svn.core.wc.SVNWCUtil;

@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) throws SVNException, IOException {
		SpringApplication.run(DemoApplication.class, args);

		DAVRepositoryFactory.setup();
		SVNRepositoryFactoryImpl.setup();
		FSRepositoryFactory.setup();

		String svnRoot = "https://DESKTOP-MJ565Q0/svn/demo/";
		String username = "test";
		String password = "test";
		SVNRepository repository=SVNRepositoryFactory.create(SVNURL.parseURIEncoded(svnRoot));
		ISVNAuthenticationManager authManager = SVNWCUtil.createDefaultAuthenticationManager(username, password.toCharArray());
		repository.setAuthenticationManager(authManager);
		
		DefaultSVNOptions options = SVNWCUtil.createDefaultOptions(true);
		SVNClientManager svnClientManager = SVNClientManager.newInstance(options, authManager);

		

		Collection entries = repository.getDir("", -1, null, (Collection) null);
		Iterator iterator = entries.iterator();
		while (iterator.hasNext()) {
			SVNDirEntry entry = (SVNDirEntry) iterator.next();
			System.out.println("/" + ("/svn/demo".equals("") ? "" : "/svn/demo" + "/")
							+ entry.getName() + " (author: '" + entry.getAuthor()
							+ "'; revision: " + entry.getRevision() + "; date: " + entry.getDate() + ")");
		}

		SVNProperties fileProperties = new SVNProperties();
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		String filePath = "/jeecg-boot/jeecg-boot-module-demo/src/main/java/org/jeecg/modules/demo/test/controller/JoaDemoController.java";
		repository.getFile(filePath, -1, fileProperties, baos);
		Iterator iterator2 = fileProperties.nameSet().iterator();
		while (iterator2.hasNext()) {
			String propertyName = (String) iterator2.next();
			String propertyValue = fileProperties.getStringValue(propertyName);
			System.out.println("propertyName："+propertyName+",propertyValue："+propertyValue);
		}
		FileOutputStream fos = new FileOutputStream("d:/a.java");
		fos.write(baos.toByteArray());
		fos.close();
		baos.close();

		SVNURL rootSvnurl = repository.getRepositoryRoot(true);

		recursive(repository, "");
		System.out.println("------------------");
	}

	private static void recursive(SVNRepository repository, String dirPath) throws SVNException {
		Collection collection = repository.getDir(dirPath, -1, null, (Collection) null);
		Iterator iterator = collection.iterator();
		while (iterator.hasNext()) {
			SVNDirEntry entry = (SVNDirEntry)iterator.next();
			System.out.println("/"+(dirPath.equals("")?"":dirPath+"/")+entry.getName());
			if(entry.getKind()==SVNNodeKind.DIR){
				recursive(repository, (dirPath.equals(""))?entry.getName():dirPath+"/"+entry.getName());
			}
		}
	}

}
